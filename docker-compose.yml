version: '3.8'

services:
  # PostgreSQL database for shared storage
  postgres:
    image: postgres:15-alpine
    container_name: lightchain-postgres
    environment:
      POSTGRES_DB: lightchain
      POSTGRES_USER: lightchain
      POSTGRES_PASSWORD: lightchain123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lightchain"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lightchain-network

  # Validator Node 1
  validator-1:
    build: .
    container_name: lightchain-validator-1
    command: ["--config", "/app/configs/validator.yaml", "--type", "validator"]
    ports:
      - "8545:8545"
      - "8546:8546"
      - "30303:30303"
      - "9094:9090"
    volumes:
      - validator1_data:/app/data
      - ./configs:/app/configs
      - ./keys:/app/keys
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ID=validator-1
      - POSTGRES_HOST=postgres
    networks:
      - lightchain-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8545", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Validator Node 2
  validator-2:
    build: .
    container_name: lightchain-validator-2
    command: ["--config", "/app/configs/validator.yaml", "--type", "validator"]
    ports:
      - "8547:8545"
      - "8548:8546"
      - "30304:30303"
      - "9091:9090"
    volumes:
      - validator2_data:/app/data
      - ./configs:/app/configs
      - ./keys:/app/keys
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ID=validator-2
      - POSTGRES_HOST=postgres
    networks:
      - lightchain-network
    restart: always

  # Sequencer Node
  sequencer:
    build: .
    container_name: lightchain-sequencer
    command: ["--config", "/app/configs/sequencer.yaml", "--type", "sequencer"]
    ports:
      - "8555:8555"
      - "8556:8556"
      - "30313:30313"
      - "9092:9092"
    volumes:
      - sequencer_data:/app/data
      - ./configs:/app/configs
      - ./keys:/app/keys
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ID=sequencer-1
      - POSTGRES_HOST=postgres
    networks:
      - lightchain-network
    restart: always

  # Archive Node
  archive:
    build: .
    container_name: lightchain-archive
    command: ["--config", "/app/configs/archive.yaml", "--type", "archive"]
    ports:
      - "8565:8565"
      - "8566:8566"
      - "30323:30323"
      - "9093:9093"
    volumes:
      - archive_data:/app/data
      - ./configs:/app/configs
      - ./keys:/app/keys
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ID=archive-1
      - POSTGRES_HOST=postgres
    networks:
      - lightchain-network
    restart: always

  # Load Balancer (nginx)
  load-balancer:
    image: nginx:alpine
    container_name: lightchain-lb
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - validator-1
      - validator-2
      - sequencer
    networks:
      - lightchain-network
    restart: always

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lightchain-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lightchain-network
    restart: always

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lightchain-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - lightchain-network
    restart: always

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: lightchain-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - lightchain-network
    restart: always

  # Automatic Transaction Generator (Real Blockchain Activity)
  tx-generator:
    image: python:3.11-alpine
    container_name: lightchain-tx-generator
    working_dir: /app
    volumes:
      - ./scripts:/app/scripts
      - ./configs:/app/configs
    command: >
      sh -c "
        pip install requests &&
        python scripts/continuous-tx-generator.py
      "
    depends_on:
      - validator-1
      - sequencer
    environment:
      - PYTHONUNBUFFERED=1
      - RPC_URL=http://validator-1:8545
      - SEQUENCER_URL=http://sequencer:8555
      - TX_INTERVAL=3
      - ENABLE_BURST_MODE=true
    networks:
      - lightchain-network
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://validator-1:8545', timeout=5)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  validator1_data:
  validator2_data:
  sequencer_data:
  archive_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  lightchain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
